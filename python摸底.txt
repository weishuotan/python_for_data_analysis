python 例题
（一）你得到了一段文本 "This is a sample text. The text contains some words." 。
要求：
统计并输出该字符串中每个字母出现的次数（不区分大小写）。
输出该字符串中最长的单词。

text = "This is a sample text. The text contains some words."
将文本转换为小写形式
text_lower = text.lower()
初始化字母计数字典
letter_counts = {}
for char in text_lower:
	if char.isalpha():  只统计字母
		letter_counts[char] = letter_counts.get(char,0) + 1
每个字母出现的次数
for letter,count in letter_counts.items():
	print(f"{letter}:{count}")
找出最长的单词
words = text.split()
longest_word = max(words,key=len)
输出最长的单词
print(f"最长的单词是：{longest_word}")

------
format
1. f 转化的格式化输出方式
只需要在我们要格式化输出的内容开头引号的前面加上 f ，
在字符串内要转义的内容用 {} 括起来即可
模板 ： print(f'xxx{aa}xxx')
2. % 格式化输出的方法
在我们要输出的字符串内将要转义内容，根据其数据类型和应用，用下面的符号代替即可
模板：print('xxx%sxxx' % a)
a = 'apple'
price = 12
print('输出：%c' % 33)     #将我们输入的数字按照ASCII码转换成对应的字符  33 对应的是！
>>>输出：!
print('输出：%s' % a)      # 转义输出字符串类型的数据
>>>输出：apple
print('输出：%d' % price)  # 将数字类型的数据类型转义输出整数
>>>输出：12
print('输出：%e' % 12)    #将数字转化成科学计数法的形式
>>>输出：1.200000e+01
print('输出：%o' % price)    #将整数转化成八进制数据
>>>输出：14
print('输出：%x' % price)   #将整数转化成十六进制数据
>>>输出：c
print('输出：%f' % price)    #格式化浮点数，默认保留小数点后六位
>>>输出：12.000000
3. str.format() 格式化输出的方法
在我们要输出的字符串内将要转义内容，用 {} 代替，
然后用 .format() 方法在括号里面传递我们想要输出的内容即可
模板 ： print('xxx{}xxx'.format(x,x))
------
split
str.split(str="",num=string.count(str))[n]
str:表示为分隔符，默认为空格，但是不能为空(’’)。若字符串中没有分隔符，则把整个字符串作为列表的一个元素
num:表示分割次数。如果存在参数num，则仅分隔成 num+1 个子字符串，并且每一个子字符串可以赋给新的变量。默认为 -1, 即分隔所有。
[n]:表示选取第n个分片
注意：当使用空格作为分隔符时，对于中间为空的项会自动忽略
（二）创建一个包含多个学生信息的字典，
每个学生的信息包括姓名（字符串）和成绩（整数）。
例如：
students = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95, 'Eva': 88}
使用循环，找出并输出所有成绩高于平均分的学生姓名。
找出并输出成绩最高的学生姓名和分数。
根据成绩，将学生分为优秀（90及以上）、良好（80-89）、
及格（60-79）和不及格（60以下）四个等级，并统计每个等级的人数。
------
students = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95, 'Eva': 88}

total_score = sum(students.values())
average_score = total_score / len(students)

print("成绩高于平均分的学生姓名：")
for name,score in students.items():
	if score>average_score:
		print(name)
		
highest_score_students = max(students,key = students.get)
highest_score = students[highest_score_students]
print(f"成绩最高的学生是：{highest_score_students},他的成绩为{highest_score}")

grades={'优秀':0,'良好':0,'及格':0,'不及格':0}
for score in students.values():
	if score>90:
		grades['优秀']+=1
	elif score<90 and score>=80:
		grades['良好']+=1
	if score<80 and score>=60:
		grades['及格']+=1
	else:
		grades['不及格']+=1
print("成绩分布：")
for grade,count in grades.items():
	print(f"{grade}:{count}人")
------
max函数
默认数值型参数，取值大者；
字符型参数，取字母表排序靠后者。
key---可做为一个函数，用来指定取最大值的方法。
default---用来指定最大值不存在时返回的默认值。
arg1---字符型参数/数值型参数，默认数值型
max(iterable, *[, key, default])
max(arg1, arg2, *args[, key])
------
（三）给定一个字典words = {'apple': 5, 'banana': 8, 'cherry': 2}，
请写一个程序，找到字典中数量最多的水果，并打印出其名称和数量。
------
words = {'apple': 5, 'banana': 8, 'cherry': 2}
print(f"最多水果的数量：{max(words,key=words.get)},名称：{words[max(words,key=words.get)]}")
------
（四）给定一个列表numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，
请写一个程序，计算列表中所有偶数的和，并打印出结果。
------
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
sum = 0
for i in numbers:
	if i % 2 == 0:
	    sum=sum+i
print(f"偶数的和为：{sum}")
------
（五）编写一个程序，接受用户输入的字符串，然后输出该字符串的逆序。例如：
示例输入：
Hello, World!
示例输出：
!dlroW ,olleH
user_input = input("请输入一个字符串：")
reversed_user_input = user_input[::-1]
print(reversed_user_input)
变量名/字符串（头下标 ：尾下标 ：跨步值 / 步长值）
